/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkgConnector;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import pkgConnector.MainFrame.MyTask;
import static pkgConnector.MainFrame.contextMenu;
import static pkgConnector.MainFrame.getPreferences;

/**
 *
 * @author user
 */
public class ClusterPanel extends javax.swing.JPanel {
    
        public class FileTypeFilter extends FileFilter {
        private String extension;
        private String description;

        public FileTypeFilter(String extension, String description) {
            this.extension = extension;
            this.description = description;
        }

        public boolean accept(File file) {
            if (file.isDirectory()) {
                return true;
            }
            return file.getName().endsWith(extension);
        }

        public String getDescription() {
            return description + String.format(" (*%s)", extension);
        }
    }
      
     FileFilter RDataFilter = new FileTypeFilter(".RData", "R enviroments");

    /**
     * Creates new form IndexingStarRSEM
     */
    public ClusterPanel() {
        initComponents();
               
    }
    private static final long serialVersionUID = 57752123321L;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        IExecutionStarRSEM = new javax.swing.ButtonGroup();
        fcmPanel = new javax.swing.JPanel();
        iCloseButton = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        iResetButton = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        ConnListText = new javax.swing.JTextField();
        jToggleButton15 = new javax.swing.JToggleButton();
        jToggleButton16 = new javax.swing.JToggleButton();
        jLabel29 = new javax.swing.JLabel();
        OutputFolderText = new javax.swing.JTextField();
        jToggleButton17 = new javax.swing.JToggleButton();
        jToggleButton18 = new javax.swing.JToggleButton();
        PlotViewButton = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        MAXkTextField = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        MINkTextField = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        ValuehTextField = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        ValuepTextField = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        RunsTextField = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        fcmPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(30, 1, 1, 1), "Functional Clustering Model for setting G", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 51, 204))); // NOI18N
        fcmPanel.setToolTipText(null);
        fcmPanel.setLayout(new java.awt.GridBagLayout());

        iCloseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/close.png"))); // NOI18N
        iCloseButton.setText("Close");
        iCloseButton.setMaximumSize(new java.awt.Dimension(100, 30));
        iCloseButton.setMinimumSize(new java.awt.Dimension(100, 30));
        iCloseButton.setPreferredSize(new java.awt.Dimension(100, 30));
        iCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iCloseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fcmPanel.add(iCloseButton, gridBagConstraints);

        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/exec.png"))); // NOI18N
        jButton12.setText("Execute");
        jButton12.setToolTipText("Execute the FCM method.");
        jButton12.setMaximumSize(new java.awt.Dimension(140, 30));
        jButton12.setMinimumSize(new java.awt.Dimension(140, 30));
        jButton12.setPreferredSize(new java.awt.Dimension(140, 30));
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fcmPanel.add(jButton12, gridBagConstraints);

        iResetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/reset.png"))); // NOI18N
        iResetButton.setText("Reset");
        iResetButton.setToolTipText("Settings reset.");
        iResetButton.setMaximumSize(new java.awt.Dimension(100, 30));
        iResetButton.setMinimumSize(new java.awt.Dimension(100, 30));
        iResetButton.setPreferredSize(new java.awt.Dimension(100, 30));
        iResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iResetButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fcmPanel.add(iResetButton, gridBagConstraints);

        jPanel13.setBackground(new java.awt.Color(248, 248, 248));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Files:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 3, 14))); // NOI18N
        jPanel13.setToolTipText(null);
        jPanel13.setLayout(new java.awt.GridBagLayout());

        jLabel28.setText("Connector List:");
        jLabel28.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel13.add(jLabel28, gridBagConstraints);

        ConnListText.setEditable(false);
        ConnListText.setToolTipText("RData storing the ConnectorList generated from the \"Data Import\" or the \"Data Cutting\" step.");
        ConnListText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnListTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 10, 10);
        jPanel13.add(ConnListText, gridBagConstraints);

        jToggleButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/filebR.png"))); // NOI18N
        jToggleButton15.setText("Browser");
        jToggleButton15.setToolTipText("Selection of the RData storing the (Truncated) ConnectorList.");
        jToggleButton15.setMaximumSize(new java.awt.Dimension(110, 30));
        jToggleButton15.setMinimumSize(new java.awt.Dimension(110, 30));
        jToggleButton15.setPreferredSize(new java.awt.Dimension(110, 30));
        jToggleButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton15ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel13.add(jToggleButton15, gridBagConstraints);

        jToggleButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/33b.png"))); // NOI18N
        jToggleButton16.setText("Cancel");
        jToggleButton16.setMaximumSize(new java.awt.Dimension(110, 30));
        jToggleButton16.setMinimumSize(new java.awt.Dimension(110, 30));
        jToggleButton16.setPreferredSize(new java.awt.Dimension(110, 30));
        jToggleButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton16ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel13.add(jToggleButton16, gridBagConstraints);

        jLabel29.setText("Output folder:");
        jLabel29.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel13.add(jLabel29, gridBagConstraints);

        OutputFolderText.setEditable(false);
        OutputFolderText.setToolTipText("Output folder where the RData storing the clustered ConnectorList will be saved.");
        OutputFolderText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputFolderTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 10, 10);
        jPanel13.add(OutputFolderText, gridBagConstraints);

        jToggleButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/52b.png"))); // NOI18N
        jToggleButton17.setText("Browser");
        jToggleButton17.setToolTipText("Folder selection.");
        jToggleButton17.setMaximumSize(new java.awt.Dimension(110, 30));
        jToggleButton17.setMinimumSize(new java.awt.Dimension(110, 30));
        jToggleButton17.setPreferredSize(new java.awt.Dimension(110, 30));
        jToggleButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton17ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel13.add(jToggleButton17, gridBagConstraints);

        jToggleButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/33b.png"))); // NOI18N
        jToggleButton18.setText("Cancel");
        jToggleButton18.setMaximumSize(new java.awt.Dimension(110, 30));
        jToggleButton18.setMinimumSize(new java.awt.Dimension(110, 30));
        jToggleButton18.setPreferredSize(new java.awt.Dimension(110, 30));
        jToggleButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton18ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel13.add(jToggleButton18, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fcmPanel.add(jPanel13, gridBagConstraints);

        PlotViewButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/plotsmall.png"))); // NOI18N
        PlotViewButton.setText("Show Plot");
        PlotViewButton.setToolTipText("Show the Elbow plot and the fDB indexes boxplot.");
        PlotViewButton.setMaximumSize(new java.awt.Dimension(140, 30));
        PlotViewButton.setMinimumSize(new java.awt.Dimension(140, 30));
        PlotViewButton.setPreferredSize(new java.awt.Dimension(140, 30));
        PlotViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlotViewButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fcmPanel.add(PlotViewButton, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel17.setBackground(new java.awt.Color(248, 248, 248));
        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Number of Clusters:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 3, 14))); // NOI18N
        jPanel17.setToolTipText(null);
        jPanel17.setLayout(new java.awt.GridBagLayout());

        jLabel39.setText("Min value of G:");
        jLabel39.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel17.add(jLabel39, gridBagConstraints);

        MAXkTextField.setToolTipText("Maximum number of clusters");
        MAXkTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MAXkTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel17.add(MAXkTextField, gridBagConstraints);

        jLabel40.setText("Max value of G:");
        jLabel40.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel17.add(jLabel40, gridBagConstraints);

        MINkTextField.setToolTipText("Minimum number of clusters");
        MINkTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MINkTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel17.add(MINkTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(jPanel17, gridBagConstraints);

        jPanel16.setBackground(new java.awt.Color(248, 248, 248));
        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Parameters:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 3, 14))); // NOI18N
        jPanel16.setToolTipText(null);
        jPanel16.setLayout(new java.awt.GridBagLayout());

        jLabel37.setText("Value of p:");
        jLabel37.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 20);
        jPanel16.add(jLabel37, gridBagConstraints);

        ValuehTextField.setToolTipText("Value of p choosen from \"Setting h\".");
        ValuehTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValuehTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel16.add(ValuehTextField, gridBagConstraints);

        jLabel38.setText("Value of h:");
        jLabel38.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 20);
        jPanel16.add(jLabel38, gridBagConstraints);

        ValuepTextField.setToolTipText("Value of p choosen from \"Setting p\".");
        ValuepTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValuepTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel16.add(ValuepTextField, gridBagConstraints);

        jLabel41.setText("Number of runs:");
        jLabel41.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 20);
        jPanel16.add(jLabel41, gridBagConstraints);

        RunsTextField.setText("50");
        RunsTextField.setToolTipText("Number of runs.");
        RunsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunsTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel16.add(RunsTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(jPanel16, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        fcmPanel.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(fcmPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void iCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iCloseButtonActionPerformed
        
        ConnListText.setText("");
        //RESET FIELDS
        CardLayout card = (CardLayout)MainFrame.MainPanel.getLayout();
        card.show(MainFrame.MainPanel, "Empty");
        MainFrame.CurrentLayout="Empty";
        //        AnalysisTree.clearSelection();
    }//GEN-LAST:event_iCloseButtonActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        if (ConnListText.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specified an Genome folder","Error: Genome folder",JOptionPane.ERROR_MESSAGE);
            return;
        }
      if (ConnListText.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specified an input file","Error: Data  input file ",JOptionPane.ERROR_MESSAGE);
            return;
        }

        try
        {
            Float x = Float.valueOf(ValuepTextField.getText());
            if ( x < 0  ){
                JOptionPane.showMessageDialog(this, "You have to specified a positive integer value for p.","Error: p value not integers ",JOptionPane.ERROR_MESSAGE);
                ValuepTextField.requestFocusInWindow();
                return;
            }
            if ( x != Math.round(x)  ){
                JOptionPane.showMessageDialog(this, "You have to specified integer value for p.","Error: p value not integers ",JOptionPane.ERROR_MESSAGE);
                ValuepTextField.requestFocusInWindow();
                return;
            }
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "You have to specified a positive integer number for p.","Error: p value not present",JOptionPane.ERROR_MESSAGE);
            ///HLowerRangeText.requestFocusInWindow();
            return;
        }
        
        try
        {
            Float x = Float.valueOf(ValuehTextField.getText());
            if ( x < 0  ){
                JOptionPane.showMessageDialog(this, "You have to specified a positive integer value for h.","Error: h value not integers ",JOptionPane.ERROR_MESSAGE);
                ValuehTextField.requestFocusInWindow();
                return;
            }
            if ( x != Math.round(x)  ){
                JOptionPane.showMessageDialog(this, "You have to specified integer value for h.","Error: h value not integers ",JOptionPane.ERROR_MESSAGE);
                ValuehTextField.requestFocusInWindow();
                return;
            }
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "You have to specified a positive integer number for h.","Error: h value not present",JOptionPane.ERROR_MESSAGE);
            ///HLowerRangeText.requestFocusInWindow();
            return;
        }
        
        try
        {
            Float x = Float.valueOf(RunsTextField.getText());
            if ( x < 1  ){
                JOptionPane.showMessageDialog(this, "You have to specified a positive integer value for the number of runs.","Error: runs value not integers ",JOptionPane.ERROR_MESSAGE);
                RunsTextField.requestFocusInWindow();
                return;
            }
            if ( x != Math.round(x)  ){
                JOptionPane.showMessageDialog(this, "You have to specified integer value for the number of runs.","Error: runs value not integers ",JOptionPane.ERROR_MESSAGE);
                RunsTextField.requestFocusInWindow();
                return;
            }
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "You have to specified a positive integer number for the number of runs.","Error: runs value not present",JOptionPane.ERROR_MESSAGE);
            ///HLowerRangeText.requestFocusInWindow();
            return;
        }
        
        try
        {
            Float pmin = Float.valueOf(MINkTextField.getText());
            Float pmax = Float.valueOf(MAXkTextField.getText());
            if (pmin != Math.round(pmin) ){
                JOptionPane.showMessageDialog(this, "You have to specified integer values for the minimum number of clusters.","Error: kmin values not integers ",JOptionPane.ERROR_MESSAGE);
                MINkTextField.requestFocusInWindow();
                return;
            }
            if ( pmax != Math.round(pmax)  ){
                JOptionPane.showMessageDialog(this, "You have to specified integer values for the maximum number of clusters.","Error: kmax values not integers ",JOptionPane.ERROR_MESSAGE);
                MAXkTextField.requestFocusInWindow();
                return;
            }
            if (pmin >= pmax ){
                JOptionPane.showMessageDialog(this, "The maximum number of clusters must be greater than te minimum!","Error: kmin>kmax ",JOptionPane.ERROR_MESSAGE);
                MINkTextField.requestFocusInWindow();
                return;
            }   
            if (pmin < 1 ){
                JOptionPane.showMessageDialog(this, "You have to specified a minimum of clusters greater or equal to 1.","Error: k values not integers ",JOptionPane.ERROR_MESSAGE);
                MINkTextField.requestFocusInWindow();
                return;
            }
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "You have to specified  a value for the min and max number of clusters.","Error: k empty values",JOptionPane.ERROR_MESSAGE);
            MINkTextField.requestFocusInWindow();
            MAXkTextField.requestFocusInWindow();
            return;
        }

        //execute code
        Runtime rt = Runtime.getRuntime();
        try{
            String[] cmd = {"/bin/bash","-c"," bash ./ExecFile/ExecClusterEstim.sh "};
            /**if (ANSudoRadioButton.isSelected()){
                cmd[2]+= "group=\\\"sudo\\\"";
            }
            else{
                cmd[2]+= "group=\\\"docker\\\"";
            }*/
            cmd[2]+= " input.file=\\\""+ConnListText.getText()+"\\\"";
            cmd[2]+= " output.folder=\\\""+OutputFolderText.getText()+"\\\"";
            cmd[2]+= " p=\\\""+ValuepTextField.getText()+"\\\"";
            cmd[2]+= " h=\\\""+ValuehTextField.getText()+"\\\"";
            cmd[2]+= " kmin=\\\""+MINkTextField.getText()+"\\\"";
            cmd[2]+= " kmax=\\\""+MAXkTextField.getText()+"\\\"";
            cmd[2]+= " runs=\\\""+RunsTextField.getText()+"\\\"";
            cmd[2]+=" "+OutputFolderText.getText() +" >& "+OutputFolderText.getText()+"/outputExecution ";

            if (MainFrame.listProcRunning.size()<MainFrame.GS.getMaxSizelistProcRunning()){
                Process pr = rt.exec(cmd);
                MainFrame.ElProcRunning tmp= new MainFrame.ElProcRunning("FCM  ", OutputFolderText.getText(),pr,MainFrame.listModel.getSize());
                MainFrame.listProcRunning.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkgConnector/images/running.png");
                ImageIcon image2 = new ImageIcon(imgURL);
                MainFrame.GL.setAvoidProcListValueChanged(-1);
                MainFrame.listModel.addElement(new MainFrame.ListEntry(" [Running]   "+tmp.toString(),"Running",tmp.path, image2 ));
                MainFrame.GL.setAvoidProcListValueChanged(0);
                if(MainFrame.listProcRunning.size()==1){
                    MainFrame.t=new Timer();
                    MainFrame.t.scheduleAtFixedRate(new MainFrame.MyTask(), 5000, 5000);
                }
            }
            else{
                MainFrame.ElProcWaiting tmp= new MainFrame.ElProcWaiting("FCM ", OutputFolderText.getText(),cmd,MainFrame.listModel.getSize());
                MainFrame.listProcWaiting.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkgConnector/images/waiting.png");
                ImageIcon image2 = new ImageIcon(imgURL);
                MainFrame.GL.setAvoidProcListValueChanged(-1);
                MainFrame.listModel.addElement(new MainFrame.ListEntry(" [Waiting]   "+tmp.toString(),"Waiting",tmp.path,image2));
                MainFrame.GL.setAvoidProcListValueChanged(0);
            }
            MainFrame.GL.setAvoidProcListValueChanged(-1);
            MainFrame.ProcList.setModel(MainFrame.listModel);
            MainFrame.ProcList.setCellRenderer(new MainFrame.ListEntryCellRenderer());
            MainFrame.GL.setAvoidProcListValueChanged(0);
        }
        catch(IOException e) {
            JOptionPane.showMessageDialog(this, e.toString(),"Error execution",JOptionPane.ERROR_MESSAGE);
            System.out.println(e.toString());
        }
        JOptionPane.showMessageDialog(this, "Functional Clustering Model task was scheduled","Confermation",JOptionPane.INFORMATION_MESSAGE);
        //execute code
    }//GEN-LAST:event_jButton12ActionPerformed

    private void iResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iResetButtonActionPerformed
        ConnListText.setText("");
        OutputFolderText.setText("");
        RunsTextField.setText("");
        MINkTextField.setText("");
        MAXkTextField.setText("");
        ValuepTextField.setText("");
        ValuehTextField.setText("");
    }//GEN-LAST:event_iResetButtonActionPerformed

    private void ValuehTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValuehTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ValuehTextFieldActionPerformed

    private void ValuepTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValuepTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ValuepTextFieldActionPerformed

    private void MAXkTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MAXkTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MAXkTextFieldActionPerformed

    private void MINkTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MINkTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MINkTextFieldActionPerformed

    private void RunsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RunsTextFieldActionPerformed

    private void jToggleButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton18ActionPerformed
       OutputFolderText.setText("");
        
    }//GEN-LAST:event_jToggleButton18ActionPerformed

    private void jToggleButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton17ActionPerformed
        JFileChooser openDir = new JFileChooser();
        if (!(OutputFolderText.getText().equals(""))){
            File file =new File(OutputFolderText.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else
        {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }
        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            OutputFolderText.setText(String.valueOf(f));
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_jToggleButton17ActionPerformed

    private void OutputFolderTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputFolderTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OutputFolderTextActionPerformed

    private void jToggleButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton16ActionPerformed
        ConnListText.setText("");
    }//GEN-LAST:event_jToggleButton16ActionPerformed

    private void jToggleButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton15ActionPerformed
        JFileChooser openDir = new JFileChooser();
        openDir.addChoosableFileFilter(RDataFilter);
        openDir.setAcceptAllFileFilterUsed(false);
        if (!(ConnListText.getText().equals(""))){
            File file =new File(OutputFolderText.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else
        {
            String curDir = getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }
        openDir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            ConnListText.setText(String.valueOf(f));
            OutputFolderText.setText(openDir.getCurrentDirectory().getAbsolutePath());
        }
        getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_jToggleButton15ActionPerformed

    private void ConnListTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnListTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ConnListTextActionPerformed

    private void PlotViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlotViewButtonActionPerformed
        
        String pdfFile =  "BoxPlotClusterGoodness_p"+ValuepTextField.getText()+"_h"+ValuehTextField.getText()+"_runs"+RunsTextField.getText() +"_G_"+MINkTextField.getText()+"_"+MAXkTextField.getText()+".pdf";

        if( Files.exists(Paths.get(OutputFolderText.getText(), pdfFile)) )
        {
            String pathfile = Paths.get(OutputFolderText.getText(), pdfFile).toString();
            Desktop desktop = Desktop.getDesktop();
            File file = new File(pathfile);
            try {
                desktop.open(file);
            } catch (IOException ex) {
                Logger.getLogger(PestimPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            String err = "No file named "+ pdfFile +" was found!";
            String err1 = "Error: No file named "+ pdfFile +" was found!";
            JOptionPane.showMessageDialog(this, err, err1 ,JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_PlotViewButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ConnListText;
    private javax.swing.ButtonGroup IExecutionStarRSEM;
    private javax.swing.JTextField MAXkTextField;
    private javax.swing.JTextField MINkTextField;
    private javax.swing.JTextField OutputFolderText;
    private javax.swing.JToggleButton PlotViewButton;
    private javax.swing.JTextField RunsTextField;
    private javax.swing.JTextField ValuehTextField;
    private javax.swing.JTextField ValuepTextField;
    private javax.swing.JPanel fcmPanel;
    private javax.swing.JButton iCloseButton;
    private javax.swing.JButton iResetButton;
    private javax.swing.JButton jButton12;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JToggleButton jToggleButton15;
    private javax.swing.JToggleButton jToggleButton16;
    private javax.swing.JToggleButton jToggleButton17;
    private javax.swing.JToggleButton jToggleButton18;
    // End of variables declaration//GEN-END:variables
}
