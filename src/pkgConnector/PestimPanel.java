/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkgConnector;
import java.awt.CardLayout;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author user
 */
public class PestimPanel extends javax.swing.JPanel {

    /**
     * Creates new form DESPanel
     */
    
    
    
    public class FileTypeFilter extends FileFilter {
        private String extension;
        private String description;

        public FileTypeFilter(String extension, String description) {
            this.extension = extension;
            this.description = description;
        }

        public boolean accept(File file) {
            if (file.isDirectory()) {
                return true;
            }
            return file.getName().endsWith(extension);
        }

        public String getDescription() {
            return description + String.format(" (*%s)", extension);
        }
    }
      
     FileFilter RDataFilter = new FileTypeFilter(".RData", "R enviroments");

    public PestimPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        DESBatch = new javax.swing.ButtonGroup();
        DEStype = new javax.swing.ButtonGroup();
        PestimationPanel = new javax.swing.JPanel();
        vCloseButton3 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        ConnListText = new javax.swing.JTextField();
        ConnListButton = new javax.swing.JToggleButton();
        fCancelButton2 = new javax.swing.JToggleButton();
        jLabel36 = new javax.swing.JLabel();
        OutputFolderText = new javax.swing.JTextField();
        jToggleButton17 = new javax.swing.JToggleButton();
        fCancelButton3 = new javax.swing.JToggleButton();
        jPanel12 = new javax.swing.JPanel();
        pMinText = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        pMaxText = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        PlotViewButton = new javax.swing.JToggleButton();

        setLayout(new java.awt.GridBagLayout());

        PestimationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(30, 1, 1, 1), "Estimation of the parameter p", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 153, 204))); // NOI18N
        PestimationPanel.setToolTipText("");
        PestimationPanel.setLayout(new java.awt.GridBagLayout());

        vCloseButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/close.png"))); // NOI18N
        vCloseButton3.setText("Close");
        vCloseButton3.setMaximumSize(new java.awt.Dimension(100, 30));
        vCloseButton3.setMinimumSize(new java.awt.Dimension(100, 30));
        vCloseButton3.setPreferredSize(new java.awt.Dimension(100, 30));
        vCloseButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vCloseButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        PestimationPanel.add(vCloseButton3, gridBagConstraints);

        jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/exec.png"))); // NOI18N
        jButton18.setText("Execute");
        jButton18.setMaximumSize(new java.awt.Dimension(140, 30));
        jButton18.setMinimumSize(new java.awt.Dimension(140, 30));
        jButton18.setPreferredSize(new java.awt.Dimension(140, 30));
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        PestimationPanel.add(jButton18, gridBagConstraints);

        jButton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/reset.png"))); // NOI18N
        jButton19.setText("Reset");
        jButton19.setMaximumSize(new java.awt.Dimension(100, 30));
        jButton19.setMinimumSize(new java.awt.Dimension(100, 30));
        jButton19.setPreferredSize(new java.awt.Dimension(100, 30));
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        PestimationPanel.add(jButton19, gridBagConstraints);

        jButton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/86b.png"))); // NOI18N
        jButton20.setText("Save conf.");
        jButton20.setMaximumSize(new java.awt.Dimension(140, 30));
        jButton20.setMinimumSize(new java.awt.Dimension(140, 30));
        jButton20.setPreferredSize(new java.awt.Dimension(140, 30));
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        PestimationPanel.add(jButton20, gridBagConstraints);

        jPanel10.setBackground(new java.awt.Color(248, 248, 248));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        jLabel35.setText("Output folders:");
        jLabel35.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel10.add(jLabel35, gridBagConstraints);

        ConnListText.setEditable(false);
        ConnListText.setToolTipText("Input data folder.");
        ConnListText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnListTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.insets = new java.awt.Insets(10, 70, 10, 10);
        jPanel10.add(ConnListText, gridBagConstraints);

        ConnListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/filebR.png"))); // NOI18N
        ConnListButton.setText("Browse");
        ConnListButton.setMaximumSize(new java.awt.Dimension(110, 30));
        ConnListButton.setMinimumSize(new java.awt.Dimension(110, 30));
        ConnListButton.setPreferredSize(new java.awt.Dimension(110, 30));
        ConnListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnListButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel10.add(ConnListButton, gridBagConstraints);

        fCancelButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/33b.png"))); // NOI18N
        fCancelButton2.setText("Cancel");
        fCancelButton2.setMaximumSize(new java.awt.Dimension(110, 30));
        fCancelButton2.setMinimumSize(new java.awt.Dimension(110, 30));
        fCancelButton2.setPreferredSize(new java.awt.Dimension(110, 30));
        fCancelButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fCancelButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel10.add(fCancelButton2, gridBagConstraints);

        jLabel36.setText("Connector List:");
        jLabel36.setToolTipText("The FPKM or TPM table file nam");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel10.add(jLabel36, gridBagConstraints);

        OutputFolderText.setEditable(false);
        OutputFolderText.setToolTipText("Output data folder.");
        OutputFolderText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputFolderTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 70, 10, 10);
        jPanel10.add(OutputFolderText, gridBagConstraints);

        jToggleButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/52b.png"))); // NOI18N
        jToggleButton17.setText("Browse");
        jToggleButton17.setMaximumSize(new java.awt.Dimension(110, 30));
        jToggleButton17.setMinimumSize(new java.awt.Dimension(110, 30));
        jToggleButton17.setPreferredSize(new java.awt.Dimension(110, 30));
        jToggleButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton17ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel10.add(jToggleButton17, gridBagConstraints);

        fCancelButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/33b.png"))); // NOI18N
        fCancelButton3.setText("Cancel");
        fCancelButton3.setMaximumSize(new java.awt.Dimension(110, 30));
        fCancelButton3.setMinimumSize(new java.awt.Dimension(110, 30));
        fCancelButton3.setPreferredSize(new java.awt.Dimension(110, 30));
        fCancelButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fCancelButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel10.add(fCancelButton3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        PestimationPanel.add(jPanel10, gridBagConstraints);

        jPanel12.setBackground(new java.awt.Color(248, 248, 248));
        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel12.setLayout(new java.awt.GridBagLayout());

        pMinText.setToolTipText("Log_2 fold change threshold for differetially expressed genes");
        pMinText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pMinTextFocusLost(evt);
            }
        });
        pMinText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pMinTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 40, 10, 300);
        jPanel12.add(pMinText, gridBagConstraints);

        jLabel40.setText("Min number of knots:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel12.add(jLabel40, gridBagConstraints);

        jLabel41.setText("Max number of knots:");
        jLabel41.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel12.add(jLabel41, gridBagConstraints);

        pMaxText.setToolTipText("adjusted p-value  threshold");
        pMaxText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pMaxTextFocusLost(evt);
            }
        });
        pMaxText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pMaxTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 40, 10, 300);
        jPanel12.add(pMaxText, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel12.add(jLabel58, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel12.add(jLabel59, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel12.add(jLabel62, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        PestimationPanel.add(jPanel12, gridBagConstraints);

        PlotViewButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgConnector/images/plotsmall.png"))); // NOI18N
        PlotViewButton.setText("Show plot");
        PlotViewButton.setEnabled(false);
        PlotViewButton.setMaximumSize(new java.awt.Dimension(140, 30));
        PlotViewButton.setMinimumSize(new java.awt.Dimension(140, 30));
        PlotViewButton.setPreferredSize(new java.awt.Dimension(140, 30));
        PlotViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlotViewButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        PestimationPanel.add(PlotViewButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(PestimationPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void vCloseButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vCloseButton3ActionPerformed
        //RESET FIELDS
        ConnListText.setText("");
        pMinText.setText("");
        pMaxText.setText("");
        OutputFolderText.setText("");
        //RESET FIELDS
        MainFrame.setCard(null);
        //GL.setAvoidProcListValueChanged(-1);
        //   AnalysisTree.clearSelection();
    }//GEN-LAST:event_vCloseButton3ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        String inputFilepath = ConnListText.getText(), 
               outputFolderpath = OutputFolderText.getText();
        //Field check

        if (inputFilepath.isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specified an input file","Error: input file",JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (outputFolderpath.isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specified an output  folder","Error: output folder",JOptionPane.ERROR_MESSAGE);
            return;
        }

        try
        {
            Float pmin = Float.valueOf(pMinText.getText());
            Float pmax = Float.valueOf(pMaxText.getText());
            if (pmin != Math.round(pmin) ){
                JOptionPane.showMessageDialog(this, "You have to specified integer values for the p's variability interval.","Error: p values not integers ",JOptionPane.ERROR_MESSAGE);
                pMinText.requestFocusInWindow();
                return;
            }
            if ( pmax != Math.round(pmax)  ){
                JOptionPane.showMessageDialog(this, "You have to specified integer values for the p's variability interval.","Error: p values not integers ",JOptionPane.ERROR_MESSAGE);
                pMaxText.requestFocusInWindow();
                return;
            }
            if (pmin >= pmax ){
                JOptionPane.showMessageDialog(this, "The maximum value of the p's variability interval must be greater than te minimum value!","Error: pmin>pmax ",JOptionPane.ERROR_MESSAGE);
                pMinText.requestFocusInWindow();
                return;
            }   
            if (pmin <= 1 ){
                JOptionPane.showMessageDialog(this, "You have to specified integer values for the minimum p greater than 1.","Error: p values not integers ",JOptionPane.ERROR_MESSAGE);
                pMinText.requestFocusInWindow();
                return;
            }
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "You have to specified  a value for the min and max values of p.","Error: p min values",JOptionPane.ERROR_MESSAGE);
            pMinText.requestFocusInWindow();
            pMaxText.requestFocusInWindow();
            return;
        }

       
        
        Runtime rt = Runtime.getRuntime();
        //execute code

        try{
            String[] cmd = {"/bin/bash","-c","  bash ./ExecFile/ExecCrossLog.sh "};

                cmd[2]+= " input.file=\\\""+ConnListText.getText()+"\\\"";
                cmd[2]+= " output.folder=\\\""+OutputFolderText.getText()+"\\\"";
                cmd[2]+= " pMin=\\\""+ pMinText.getText() + "\\\"";
                cmd[2]+= " pMax=\\\""+ pMaxText.getText() + "\\\"";
                cmd[2]+=" "+ OutputFolderText.getText()+" >& "+OutputFolderText.getText()+"/outputExecution ";
                //ProcessStatus.setText(pr.toString());
                if (MainFrame.listProcRunning.size()<MainFrame.GS.getMaxSizelistProcRunning()){
                Process pr = rt.exec(cmd);
                System.out.println(cmd[2]);
                MainFrame.ElProcRunning tmp= new MainFrame.ElProcRunning("p estimation ", OutputFolderText.getText() ,pr,MainFrame.listModel.getSize());
                MainFrame.listProcRunning.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkgConnector/images/running.png");
                ImageIcon image2 = new ImageIcon(imgURL);
                MainFrame.GL.setAvoidProcListValueChanged(-1);
                MainFrame.listModel.addElement(new MainFrame.ListEntry(" [Running]   "+tmp.toString(),"Running",tmp.path, image2 ));
                MainFrame.GL.setAvoidProcListValueChanged(0);
                if(MainFrame.listProcRunning.size()==1){
                    MainFrame.t=new Timer();
                    MainFrame.t.scheduleAtFixedRate(new MainFrame.MyTask(), 5000, 5000);
                }
            }
                else{
                MainFrame.ElProcWaiting tmp= new MainFrame.ElProcWaiting("p estimation ", OutputFolderText.getText(),cmd,MainFrame.listModel.getSize());
                MainFrame.listProcWaiting.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkgConnector/images/waiting.png");
                ImageIcon image2 = new ImageIcon(imgURL);
                MainFrame.GL.setAvoidProcListValueChanged(-1);
                MainFrame.listModel.addElement(new MainFrame.ListEntry(" [Waiting]   "+tmp.toString(),"Waiting",tmp.path,image2));
                MainFrame.GL.setAvoidProcListValueChanged(0);
            }
            MainFrame.GL.setAvoidProcListValueChanged(-1);
            MainFrame.ProcList.setModel(MainFrame.listModel);
            MainFrame.ProcList.setCellRenderer(new MainFrame.ListEntryCellRenderer());
            MainFrame.GL.setAvoidProcListValueChanged(0);
        }
        catch(IOException e) {
            JOptionPane.showMessageDialog(this, e.toString(),"Error execution",JOptionPane.ERROR_MESSAGE);
            System.out.println(e.toString());
        }
        JOptionPane.showMessageDialog(this, "The estimation of p task was scheduled","Confermation",JOptionPane.INFORMATION_MESSAGE);

           
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        ConnListText.setText("");
        pMinText.setText("");
        pMaxText.setText("");
        OutputFolderText.setText("");
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        //saveAsMenuItemActionPerformed(evt);
    }//GEN-LAST:event_jButton20ActionPerformed

    private void ConnListTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnListTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ConnListTextActionPerformed

    private void ConnListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnListButtonActionPerformed
        JFileChooser openDir = new JFileChooser();
        openDir.addChoosableFileFilter(RDataFilter);
        openDir.setAcceptAllFileFilterUsed(false);
        if (!(ConnListText.getText().equals(""))){
            File file =new File(OutputFolderText.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else
        {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }
        openDir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            ConnListText.setText(String.valueOf(f));
            //UPDATE TO REMOVE OUTPUT FOLDER
            OutputFolderText.setText(openDir.getCurrentDirectory().getAbsolutePath());
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
        PlotViewButton.setEnabled(Files.exists(Paths.get(OutputFolderText.getText(), "CrossLogLikePlot_Estimation_p.pdf")));

    }//GEN-LAST:event_ConnListButtonActionPerformed

    private void fCancelButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fCancelButton2ActionPerformed
        ConnListText.setText("");
        OutputFolderText.setText("");
    }//GEN-LAST:event_fCancelButton2ActionPerformed

    private static final long serialVersionUID = 5778212335L;
     
    private void pMinTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pMinTextFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_pMinTextFocusLost

    private void pMinTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pMinTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pMinTextActionPerformed

    private void pMaxTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pMaxTextFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_pMaxTextFocusLost

    private void pMaxTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pMaxTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pMaxTextActionPerformed

           
    private void PlotViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlotViewButtonActionPerformed
        String pathfile = Paths.get(OutputFolderText.getText(), "CrossLogLikePlot_Estimation_p.pdf").toString();
        Desktop desktop = Desktop.getDesktop();
        File file = new File(pathfile);
        try {
            desktop.open(file);
        } catch (IOException ex) {
            Logger.getLogger(PestimPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_PlotViewButtonActionPerformed

    private void fCancelButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fCancelButton3ActionPerformed
        OutputFolderText.setText("");
    }//GEN-LAST:event_fCancelButton3ActionPerformed

    private void jToggleButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton17ActionPerformed
        JFileChooser openDir = new JFileChooser();
        if (!(OutputFolderText.getText().equals(""))){
            File file =new File(OutputFolderText.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else
        {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }
        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            OutputFolderText.setText(String.valueOf(f));
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
        PlotViewButton.setEnabled(Files.exists(Paths.get(OutputFolderText.getText(), "CrossLogLikePlot_Estimation_p.pdf")));
    }//GEN-LAST:event_jToggleButton17ActionPerformed

    private void OutputFolderTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputFolderTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OutputFolderTextActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton ConnListButton;
    public static javax.swing.JTextField ConnListText;
    private javax.swing.ButtonGroup DESBatch;
    private javax.swing.ButtonGroup DEStype;
    public static javax.swing.JTextField OutputFolderText;
    private javax.swing.JPanel PestimationPanel;
    private javax.swing.JToggleButton PlotViewButton;
    private javax.swing.JToggleButton fCancelButton2;
    private javax.swing.JToggleButton fCancelButton3;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton20;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JToggleButton jToggleButton17;
    public static javax.swing.JTextField pMaxText;
    public static javax.swing.JTextField pMinText;
    private javax.swing.JButton vCloseButton3;
    // End of variables declaration//GEN-END:variables

    private File File(String imagePath) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
